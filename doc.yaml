swagger: '2.0'
# This is your document metadata
# i had some problems determing when to use put and when post. this is my reference
# http://stackoverflow.com/questions/630453/put-vs-post-in-rest
info:
  version: "0.1.0"
  title: TODO API
  description: an API for managing todo lists and getting have-done lists
  contact:
    name: MerlinBecker
    url: https://github.com/merlinbecker/Todo_API
host: merl.be
basePath: /todo_api/v0.1/
# Describe your paths here
schemes: ["http"]

security:
  - UserSecurity: []
  
paths:
  /{username}:
    get:
      description: get a summary of tasks and projects the user has
      parameters:
      - name: username 
        in: path
        type: string
        required: true
        description: The name of the user
      responses: 
        200: 
          description: successful returned summary
          schema:
              $ref: "#/definitions/usersummaryObj"
          examples:
            application/json: |-
              {
                 "projects_count":5,
                 "projects_rel": "http://example.com/foouser/projects",
                 "todos_count":10,
                 "todos_rel":"http://example.com/foouser/tasks?show=todo"
              }
        401:
          description: No access, because wrong login data
      security:
        - UserSecurity: []
  /{username}/tasks:
    get: 
      description: gets all tasks objects from the user
      parameters:
      - name: username 
        in: path
        type: string
        required: true
        description: The name of the user
      - name: show
        in: query
        type: string
        required: false
        description: status filter parameter (todo, have-done,cancelled)
      security:
        - UserSecurity: []
      responses:
        200:
          description: successful returned list of tasks
          schema: 
            type: array
            items:
              $ref: "#/definitions/brief_taskobj"
        401:
          description: No access, because wrong user login data
    post:
      description: post task object(s) into the list
      parameters:
      - name: username 
        in: path
        type: string
        required: true
        description: The name of the user
      - name: tasks
        required: true
        in: body
        description: array of new tasks
        schema:
          type: array
          items:
            $ref: "#/definitions/taskObj"
      security:
        - UserSecurity: []
      responses:
        201: 
          description: Tasks have been created
          schema: 
            type: array
            items:
              $ref: "#/definitions/brief_taskobj"
        401:
          description: No permission to create todos
        400: 
          description: insufficient or wrong data
    delete:
      description: delete specific tasks by their id
      parameters:
      - name: username
        in: path
        type: string
        required: true
        description: The name of the user who owns the task
      - name: ids
        required: true
        in: body
        description: arrays of tasks
        schema:
          type: array
          items:
            type: integer
      responses:
        200:
          description: successful deleted tasks list
        401:
          description: No access, because wrong user login data
        400: 
          description: insufficient or wrong data
      security: 
      - UserSecurity: []
    put:
      description: alters specific tasks by their id
      parameters:
      - name: username
        in: path
        type: string
        required: true
        description: The name of the user who owns the task
      - name: tasks
        required: true
        in: body
        description: arrays of tasks
        schema:
          type: array
          items:
            $ref: "#/definitions/taskObj"
      responses:
        200:
          description: successful altered tasks
          schema: 
            type: array
            items:
              $ref: "#/definitions/brief_taskobj"
        401:
          description: No access, because wrong user login data
        400: 
          description: insufficient or wrong data
      security: 
      - UserSecurity: []
  /{username}/tasks/{id}:
    get:
      description: get a specific task by id
      parameters:
      - name: username
        in: path
        type: string
        required: true
        description: The name of the user who owns the task
      - name: id 
        in: path
        type: integer
        required: true
        description: The task by it's id
      security: 
         - UserSecurity: []
      responses:
        200:
          description: successful returned task
          schema:
             $ref: "#/definitions/taskObj"
        401:
          description: No access, because wrong user login data
        404:
          description: Tasks not found
  /{username}/projects:
    get:
      description: get all projects for user {username}.
      parameters:
        - name: username
          in: path
          type: string
          required: true
          description: The name of the user
      security:
        - UserSecurity: []
      produces:
        - application/json
      responses:
        200:
          description: successful returned projects list
          schema:
            type: array
            items:
              $ref: "#/definitions/projectObj"
        401:
          description: No access, because wrong user login data
  /{username}/projects/{projectname}:
    get:
      description: get all tasks for user {username} and project {projectname}.
      parameters:
        - name: username 
          in: path
          type: string
          required: true
          description: The name of the user
        - name: projectname 
          in: path
          type: string
          required: true
          description: The name of the project
      security:
        - UserSecurity: []
      responses:
        200:
          description: successful returned task list
          schema:
            type: array
            items:
              $ref: "#/definitions/brief_taskobj"
        401:
          description: No access, because wrong user login data
  
  /users:
    get:
      description: Gets all todo list users
      responses:
        200:
          description: successful users response
          schema:
            type: array
            items:
              $ref: "#/definitions/userObj"
          examples:
            application/json: |-
              [{
                 "u_id":1,
                 "u_name":"foo",
                 "u_email":"foo@example.com"
              },{...}]
        401:
          description: No access, because wrong login data
      produces:
        - application/json
      security: 
        - AdminSecurity: []
    delete:
      description: deletes users from the list
      consumes:
        - application/json
      parameters:
        - name: user
          required: true
          in: body
          description: data for new user
          schema:
            type: array
            items: 
              $ref: "#/definitions/userObj"
      security:
        - AdminSecurity: []
      responses:
        200: 
          description: user deleted
        400: 
          description: insufficient or wrong data
    post: 
      description: adds user to the list
      consumes:
        - application/json
      parameters:
        - name: user
          required: true
          in: body
          description: data for new user
          schema:
            $ref: "#/definitions/newUserObj"
      security:
        - AdminSecurity: []
      responses:
        201: 
          description: a new user was created
        400: 
          description: insufficient or wrong data
          
  # This is a path endpoint. Change it.
  /settings:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: Gets the settings with which the server is running
      produces:
      - application/json
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: successful settings response
          schema:
            $ref: "#/definitions/settingsObj"
          examples:
            application/json: |-
              {
                "uses_basic_auth": true,
                "basic_auth_admin": "todoadmin",
                "basic_auth_pw": "root",
                "db_host": "localhost",
                "db_user": "root",
                "db_password": "root",
                "db_database":"todo_db"
              }
        501: 
          description: Server not set up, misses specified data
          schema: 
            $ref: "#/definitions/settingsObj"
          examples:
            application/json: |-
              [
              "uses_basic_auth",
              "db_host",
              "db_user",
              "db_password",
              "db_database"
              ]
        401:
          description: No access, because wrong login data
      security:
        - AdminSecurity: []
    put:
      description: alters settings for the server
      consumes:
        - application/json
      parameters:
        - name: settings
          required: true
          in: body
          description: The settings JSON transmitted to the server
          schema:
            $ref: "#/definitions/settingsObj"
      security:
        - AdminSecurity: []
      responses:
        201:
          description: Settings successfully created
        401:
          description: No Access, because login data are missing (if already defined in settings)
securityDefinitions:
  UserSecurity:
    type: basic
  AdminSecurity:
    type: basic
    
definitions:
  usersummaryObj:
    type: object
    properties:
      projects_count:
        type: integer
      projects_rel: 
        type: string
      todos_count:
        type: integer
      todos_rel:
        type: string
  projectObj:
    type: object
    properties:
      projectname: 
        type: string
      todos:
        type: integer
      havedones:
        type: integer
      rel:
        type: string
  brief_taskobj:
    type: object
    properties:
      task_id:
        type: integer
      description:
        type: string
      status:
        type: string
      rel:
        type: string
  taskObj:
    type: object
    required: [task_description]
    properties:
      task_id:
        type: integer
        description: not considered when inserting a task
      task_description:
        type: string
      urgent:
        type: boolean
      important:
        type: boolean
      status:
        type: string
        enum: ["todo", "have-done", "cancelled"]
        description: default is 'todo'
      deadline: 
        type: string
        format: date
      repeat_interval:
        type: string
      repeat_since:
        type: string
      repeat_until:
        type: string
      projects:
        type: array
        items:
          type: string
  newUserObj:
    type: object
    properties:
      username: 
        type: string
      user_email:
        type: string
      user_password:
        type: string
        format: password
      user_pw_repeat:
        type: string
        format: password
  
  userObj:
    type: object
    properties:
      u_id:
        type: integer
      u_name:
        type: string
      u_email:
        type: string
        
  settingsObj:
    type: object
    properties:
      uses_basic_auth:
        type: boolean
      basic_auth_admin:
        type: string
      basic_auth_pw:
        type: string
        format: password
      db_host:
        type: string
      db_user:
        type: string
      db_password:
        type: string
        format: password
      db_database:
        type: string